{"version":3,"sources":["components/Card.js","components/Input.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","Input","_ref","stage","label","value","regex","setFunc","_useState","useState","_useState2","Object","slicedToArray","concat","disabled","onChange","event","target","match","App","setStage","_useState3","_useState4","cardNumber","setCardNumber","_useState5","_useState6","cardholderName","setCardholderName","_useState7","_useState8","validThru","setValidThru","_useState9","_useState10","securityCode","setSecurityCode","_useState11","_useState12","croak","setCroak","_useState13","_useState14","setError","src_components_Card","src_components_Input","onClick","length","setTimeout","handleButton","onAnimationEnd","type","Boolean","window","location","hostname","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f08b10d.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.scss'\n\nconst Card = () => {\n  return (\n    <div className=\"card-container\">\n      <div className=\"card\">\n        <div className=\"face front\"></div>\n        <div className=\"face back\"></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import React, { useState } from 'react'\nimport './Input.scss'\n\nconst Input = ({ className, stage, label, value, regex, setFunc }) => {\n  const [error, setError] = useState()\n\n  function handleChange(event) {\n    if (event.target.value.match(regex)) {\n      setFunc(event.target.value)\n    }\n  }\n  return (\n    <div className={`input-container ${className === stage ? 'enabled' : 'disabled'}`}>\n      <span>{label}</span>\n      <input disabled={className === stage ? false : true } onChange={handleChange} value={value} />\n    </div>\n  )\n}\n\nexport default Input","import React, { useState } from 'react'\nimport './App.scss'\nimport { Card, Input } from './'\n\nconst App = () => {\n\n  const [stage, setStage] = useState('card-number')\n  const [cardNumber, setCardNumber] = useState('')\n  const [cardholderName, setCardholderName] = useState('')\n  const [validThru, setValidThru] = useState('')\n  const [securityCode, setSecurityCode] = useState('')\n  const [croak, setCroak] = useState(false)\n  const [error, setError] = useState('')\n\n  const handleButton = stage => {\n    if (stage === 'card-number') {\n      if (cardNumber.length === 16) setStage('cardholder-name')\n      else setError ('')\n    } else if (stage === 'cardholder-name') {\n      if (cardholderName.length > 0) setStage('valid-thru')\n      else setError('')\n    } else if (stage === 'valid-thru') {\n      if (validThru.length === 4) setStage('security-code')\n      else setError('')\n    } else if (stage === 'security-code') {\n      if (securityCode.length === 3) {\n        setTimeout(() => setSecurityCode(''), 200)\n        setStage('card-number')\n        setCardNumber('')\n        setCardholderName('')\n        setValidThru('')\n      } else {\n        setError('')\n      }\n    }\n  }\n\n  return (\n    <div className='app'>\n      <Card />\n      <span className='headline'>Type in your card details:</span>\n      <div className={`inputs-container ${stage}`}>\n        <Input \n          stage={stage}\n          className='card-number'\n          label='Card Number'\n          setFunc={setCardNumber}\n          value={cardNumber}\n          regex={/^[0-9]{0,16}$/}\n        />\n        <Input \n          stage={stage}\n          className='cardholder-name'\n          label='Cardholder Name'\n          setFunc={setCardholderName}\n          value={cardholderName}\n          regex={/^[a-z,A-Z ]{0,21}$/}\n        />\n        <Input \n          stage={stage}\n          className='valid-thru'\n          label='Valid Thru'\n          setFunc={setValidThru}\n          value={validThru}\n          regex={/^[0-9]{0,4}$/}\n        />\n        <Input \n          stage={stage}\n          className='security-code'\n          label='Security Code (CVV)'\n          setFunc={setSecurityCode}\n          value={securityCode}\n          regex={/^[0-9]{0,3}$/}\n        />\n      </div>\n      <button className={croak ? 'croak' : ''} \n      onClick={() => { \n        setCroak(true) \n        handleButton(stage)\n      }} \n      onAnimationEnd={() => setCroak(false)}\n      type='button'>\n        {stage === 'security-code' ? 'Done' : 'Next'}\n      </button> \n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}