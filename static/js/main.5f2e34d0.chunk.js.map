{"version":3,"sources":["components/Card.js","components/Input.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","stage","react_default","a","createElement","className","concat","index_esm","Input","label","value","regex","setFunc","error","setError","disabled","onChange","event","target","match","Object","objectSpread","length","max","App","_useState","useState","_useState2","slicedToArray","setStage","_useState3","_useState4","cardNumber","setCardNumber","_useState5","_useState6","cardholderName","setCardholderName","_useState7","_useState8","validThru","setValidThru","_useState9","_useState10","securityCode","setSecurityCode","_useState11","_useState12","croak","setCroak","_useState13","_useState14","src_components_Card","src_components_Input","RegExp","onClick","setTimeout","handleButton","onAnimationEnd","type","Boolean","window","location","hostname","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f2e34d0.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.scss'\nimport { FaDragon } from 'react-icons/fa'\n\nconst Card = ({ stage }) => {\n  return (\n    <div className='card-container'>\n      <div className={`card ${stage === 'security-code' ? 'flipped' : ''}`}>\n        <div className='face front'>\n          <FaDragon />\n          <div>\n            {/* <div>0000 0000 0000 0000</div>\n            <div>\n              <div>\n                <span>CARDHOLDER NAME</span>\n                <span>Evan Alto</span>\n              </div>\n              <div>\n                <span>VALID THRU</span>\n                <span>05/19</span>\n              </div>\n            </div> */}\n          </div>\n        </div>\n        <div className='face back'>\n          {/* <div>682</div> */}\n          <FaDragon />          \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import React from 'react'\nimport './Input.scss'\n\nconst Input = ({ className, stage, label, value, regex, setFunc, error, setError }) => {\n\n  function handleChange(event) {\n    if (event.target.value.match(regex)) {\n      if (error) setError('')\n      setFunc({ ...value, value: event.target.value})\n    } else if (value.value.length !== value.max) {\n      setError('Valid characters only')\n    }\n  }\n  return (\n    <div className={`input-container ${className === stage ? 'enabled' : 'disabled'} ${error ? 'error' : ''}`}>\n      {/* <div className=\"labels\"> */}\n        <span>{label}</span>\n        {error && <span className=\"error\">{error}</span>}\n      {/* </div> */}\n      <input disabled={className === stage ? false : true } onChange={handleChange} value={value.value} />\n    </div>\n  )\n}\n\nexport default Input","import React, { useState } from 'react'\nimport './App.scss'\nimport { Card, Input } from './'\n\nconst App = () => {\n\n  const [stage, setStage] = useState('card-number')\n  const [cardNumber, setCardNumber] = useState({ value:'', max: 16})\n  const [cardholderName, setCardholderName] = useState({ value: '', max: 21})\n  const [validThru, setValidThru] = useState({ value: '', max: 4})\n  const [securityCode, setSecurityCode] = useState({ value: '', max: 3})\n  const [croak, setCroak] = useState(false)\n  const [error, setError] = useState('')\n\n  const handleButton = stage => {\n    if (stage === 'card-number') {\n      if (cardNumber.value.length === cardNumber.max) setStage('cardholder-name')\n      else setError ('Must be a valid card number')\n    } else if (stage === 'cardholder-name') {\n      if (cardholderName.value.length > 0) setStage('valid-thru')\n      else setError('Must be a valid name')\n    } else if (stage === 'valid-thru') {\n      if (validThru.value.length === validThru.max) setStage('security-code')\n      else setError('Must be a valid month/year')\n    } else if (stage === 'security-code') {\n      if (securityCode.value.length === securityCode.max) {\n        setTimeout(() => setSecurityCode(''), 200)\n        setStage('card-number')\n        setCardNumber('')\n        setCardholderName('')\n        setValidThru('')\n      } else {\n        setError('Must be a valid security code')\n      }\n    }\n  }\n\n  return (\n    <div className='app'>\n      <Card stage={stage} \n        cardNumber={cardNumber} \n        cardholderName={cardholderName}\n        validThru={validThru}\n        securityCode={securityCode}\n      />\n      <span className='headline'>Type in your card details:</span>\n      <div className={`inputs-container ${stage}`}>\n        <Input \n          stage={stage}\n          className='card-number'\n          label='Card Number'\n          setFunc={setCardNumber}\n          value={cardNumber}\n          regex={new RegExp(`^[0-9]{0,${cardNumber.max}}$`)}\n          error={error}\n          setError={setError}\n        />\n        <Input \n          stage={stage}\n          className='cardholder-name'\n          label='Cardholder Name'\n          setFunc={setCardholderName}\n          value={cardholderName}\n          regex={new RegExp(`^[a-z,A-Z ]{0,${cardholderName.max}}$`)}\n          error={error}\n          setError={setError}\n        />\n        <Input \n          stage={stage}\n          className='valid-thru'\n          label='Valid Thru'\n          setFunc={setValidThru}\n          value={validThru}\n          regex={new RegExp(`^[0-9]{0,${validThru.max}}$`)}\n          error={error}\n          setError={setError}\n        />\n        <Input \n          stage={stage}\n          className='security-code'\n          label='Security Code (CVV)'\n          setFunc={setSecurityCode}\n          value={securityCode}\n          regex={new RegExp(`^[0-9]{0,${securityCode.max}}$`)}\n          error={error}\n          setError={setError}\n        />\n      </div>\n      <button className={croak ? 'croak' : ''} \n      onClick={() => { \n        setCroak(true) \n        handleButton(stage)\n      }} \n      onAnimationEnd={() => setCroak(false)}\n      type='button'>\n        {stage === 'security-code' ? 'Done' : 'Next'}\n      </button> \n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}